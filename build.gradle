/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'wlee' at '12/5/14 3:59 PM' with Gradle 2.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'gradle-one-jar'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

mainClassName = 'EventApiApplication'

compileJava {
    options.fork = true
    options.incremental = true
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile (
            'org.slf4j:slf4j-api:1.7.7',
            'com.amazonaws:aws-java-sdk:1.9.9',
            'io.dropwizard:dropwizard-core:0.8.0-rc1'
    )
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.11'
}

task uberjar(type: OneJar) {
    mainClass = mainClassName
}

run {
    args 'server', './src/dist/config/eventapi.yml'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

artifacts {
    uberjar
}

//jar {
//   manifest { attributes "Main-Class": EventApiApplication }
//    from (configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
//        exclude "META-INF/*.SF"
//        exclude "META-INF/*.DSA"
//        exclude "META-INF/*.RSA"
//    }
//}

